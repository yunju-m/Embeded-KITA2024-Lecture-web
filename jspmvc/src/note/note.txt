# MVC(Model, View, Controller) 패턴
* Model : 데이터 + 데이터 처리
* View : 화면 또는 UI
* Controller : 모델하고 뷰를 분리하기 위한 서블릿
* 목적 : Model과 View를 분리해서 서로 독립성을 유지시키는 것
		=> 하나의 모델을 여러 View에서 사용할 수 있게 된다.
		
[진행 과정]
1. [Controller] 클라이언트의 서비스 요청 수신
2. [Controller] 요청을 분석하고 클라이언트가 보낸 데이터를 모델에 전송
3. [Model] 전송된 클라이언트의 데이터를 받아서 로직을 수행
4. [Model] 수행된 결과를 컨트롤러에 전송
5. [Controller] 모델이 보낸 수행 결과를 View에게 전달
6. [View] 컨트롤러가 보낸 수행 결과를 화면에 출력

# DAO/DO (Data Access Object / Data Object) 패턴
* 데이터와 데이터 처리를 분리하는 패턴
* 일반적으로 자바에서는 Javabean과 DAO를 분리
	- 데이터 : Javabean
	- 데이터 처리 : DAO
	
# Service 패턴 (Facade 패턴)
* 클라이언트가 서버의 서비스를 요청할 때 interface를 거치도록 하는 패턴
* 어플리케이션의 확장성, 유연성, 보안성 등이 증대됨
* 패턴1 : 인터페이스를 구현한 클래스
* 패턴2 : 인터페이스를 구현한 추상클래스를 상속받는 클래스

* 서비스 패턴은 모든 클라이언트의 요청을 한 곳에서 집중 수신/관리
* 일반적으로 서비스 인터페이스를 만들고 클라이언트는 인터페이스를 통해서 서비스를 요청

# Command 패턴
서비스를 커멘드로 분리 = 서비스와 커맨드를 매핑 (1:1 매핑)
A커맨드 --> A서비스를 실행